library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all; 
use ieee.numeric_std.all;

entity main is
	port( clk			: in  std_logic;
		  rst 			: in  std_logic;
		  lcd_rw 		: out std_logic;                         	--read & write control
     	  lcd_en 		: out std_logic;                         	--enable control
          lcd_rs 		: out std_logic;                         	--data or command control
      	  lcd1  		: out std_logic_vector(7 downto 0);			--see pin planning in krypton manual 
		  b11 			: out std_logic;
		  b12 			: out std_logic;
		  detect 		: out std_logic
		  );
end entity;	

architecture behave of main is

	function to_ascii(x: std_logic_vector(4 downto 0)) return std_logic_vector is
    
    	variable number:	integer; 
    	variable ret_val:   std_logic_vector(7 downto 0);
  	begin
    
    	number 	:=  to_integer(unsigned(x));
    	number 	:=  number + 96;
    	ret_val :=  std_logic_vector(to_unsigned(number,8)); 

    	return ret_val;

	end to_ascii;
	

--  LCD Interfacing signals
	signal erase 		: std_logic := '0';                  
	signal put_char 	: std_logic := '1';
	signal write_data 	: std_logic_vector(7 downto 0)  := "00000000";
	signal write_row 	: std_logic_vector( 0 downto 0) := "0";
	signal write_column : std_logic_vector(3 downto 0) := "0000";
	signal ack 			: std_logic;
	signal i 			: integer := 0;
	signal j 			: integer := 0;

-- Sequence_generator signals
	signal sequence		: std_logic_vector(4 downto 0);
	signal covid_det    : std_logic;

-- Ascii value signal
	signal ascii_value	: std_logic_vector(7 downto 0);

-- Clock signal for LCD module	
	signal lcd_clk		: std_logic := '0';

	component cov_detect is
	port(   inp:in std_logic_vector(4 downto 0);
			reset,clock:in std_logic;
			outp: out std_logic);
	end component;

	component seq_generator is
	port(	reset,clock:in std_logic;
			outp: out std_logic_vector(4 downto 0));
	end component;

	component lcd_controller is
	port (	clk    : in std_logic;                          --clock i/p
    	 	rst    : in std_logic;                          -- reset
	   		erase : in std_logic;                  			--- clear position
	   		put_char : in std_logic;
	   		write_data : in std_logic_vector(7 downto 0) ;
			write_row : in std_logic_vector(0 downto 0);
			write_column : in std_logic_vector(3 downto 0);
			ack : out std_logic;
    		lcd_rw : out std_logic;                         --read & write control
    		lcd_en : out std_logic;                         --enable control
    		lcd_rs : out std_logic;                         --data or command control
    		lcd1  : out std_logic_vector(7 downto 0);
			b11 : out std_logic;
			b12 : out std_logic);     --data line
	end component lcd_controller;

begin
		
	------------------------------------------------------------------------------------
	process(clk)-- lcd_clk generator for lcd 200Hz
		variable div_clk: integer := 0;
	begin
		if rising_edge(clk) then
			div_clk	:= div_clk + 1;
			if div_clk = 500000 then
				lcd_clk <= '1';
			elsif div_clk = 1000000 then
				lcd_clk <= '0';
				div_clk := 0;
			end if;
		end if;	
	end process;

	seq_generator_instance : seq_generator port map(
					reset		=>	rst,
					clock		=>	clk,
					outp		=>  sequence);

	covid_det_instance : cov_detect port map(
					inp			=> sequence,
					reset		=> rst,
					clock		=> clk,
					outp		=> covid_det);

	detect <= covid_det;

	lcd_instance : lcd_controller port map (
					clk 			=> lcd_clk, 
					rst 			=> rst, 
					erase 			=> erase ,
					put_char		=> put_char ,
					write_data		=> write_data,
					write_row		=> write_row,
					write_column	=> write_column ,
					ack 			=> ack, 
					lcd_rw 			=> lcd_rw,
					lcd_en 			=> lcd_en,
					lcd_rs 			=> lcd_rs,
					lcd1 			=> lcd1,
					b11 			=> b11,
					b12 			=> b12);



	process(ack,rst,lcd_clk)
	begin

		if (rising_edge(lcd_clk)) then
		
			-- If reset, then put 1st char in 1st row, 1st column.	
			if (rst = '0') then
				erase <= '0';
				write_row <= "0";
				write_column <= "0000";
				write_data <= "00111110";
				put_char <= '1';
			end if;

			--Put next character only after you have recieve acknowledgment 
			if(ack = '1') then

				i <= i + 1; 
				if ( i <= 11) then
					erase    <= '0';
					put_char <= '1';
					write_row <= "0";
					write_column <= std_logic_vector(to_unsigned(i,4));
					write_data   <= ascii_value;

				else 
					erase <= '1';
					put_char <= '0';
					write_row <= "0";
					write_column <= std_logic_vector(to_unsigned((i-11),8));
					write_data <= "00000000";
				end if;
			end if;
		end if;
	end process;

end behave;




