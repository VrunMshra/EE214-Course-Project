library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity seq_generator is
port(	reset,clock:in std_logic;
		outp: out std_logic_vector(4 downto 0));
end seq_generator;

architecture rch of seq_generator is

---------------Define state type here-----------------------------
type state is (init,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11);
---------------Define signals of state type-----------------------
signal y_present,y_next: state:=init;

begin
clock_proc:process(clock,reset)
begin
	if(reset='1') then
		y_present<=init;
	elsif(clock='1' and clock' event) then
		y_present<=y_next;
	end if;
	
end process;

state_transition_proc:process(inp,y_present)
begin
	case y_present is
		when init=>
			y_next	<= s1;
			outp 	<= "00000";
			
		when s1=>					-- l
			y_next	<= s2;
			outp 	<= "01100";
			
		when s2=>					-- c 
			y_next	<= s3;
			outp 	<= "00011";
			
		when s3=>					-- l
			y_next	<= s4;
			outp 	<= "01100";
			
		when s4=>					-- o
			y_next	<= s5;
			outp 	<= "01111";

		when s5=>					-- l
			y_next	<= s6;
			outp 	<= "01100";

		when s6=>					-- v
			y_next	<= s7;
			outp 	<= "10110";

		when s7=>					-- l
			y_next	<= s8;
			outp 	<= "01100";

		when s8=>					-- i
			y_next	<= s9;
			outp 	<= "01001";

		when s9=>					-- l
			y_next	<= s10;
			outp 	<= "01100";

		when s10=>					-- d
			y_next	<= s11;
			outp 	<= "00100";

		when s11=>					-- l
			y_next	<= s1;
			outp 	<= "01100";
		end case;
end process;

end rch;